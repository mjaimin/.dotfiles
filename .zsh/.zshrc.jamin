# =============================================================================
#                               Oh My Zsh Setup
# =============================================================================
# Path to your Oh My Zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Theme Configuration
ZSH_THEME="powerlevel10k/powerlevel10k"
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Load Oh My Zsh
source $ZSH/oh-my-zsh.sh

# =============================================================================
#                           Environment Variables
# =============================================================================
# Locale Settings
export LANG=en_IN.UTF-8
export LANGUAGE=en_IN.UTF-8
export LC_CTYPE=en_IN.UTF-8
export LC_NUMERIC=en_IN.UTF-8
export LC_TIME=en_IN.UTF-8
export LC_COLLATE=en_IN.UTF-8
export LC_MONETARY=en_IN.UTF-8
export LC_MESSAGES=en_IN.UTF-8
export LC_PAPER=en_IN.UTF-8
export LC_NAME=en_IN.UTF-8
export LC_ADDRESS=en_IN.UTF-8
export LC_TELEPHONE=en_IN.UTF-8
export LC_MEASUREMENT=en_IN.UTF-8
export LC_IDENTIFICATION=en_IN.UTF-8
export LC_ALL=en_IN.UTF-8

# =============================================================================
#                           Tool Configurations
# =============================================================================
# Powerline
if [[ -r /usr/share/powerline/bindings/zsh/powerline.zsh ]]; then
    source /usr/share/powerline/bindings/zsh/powerline.zsh
fi

# FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
source /home/jaimin/.dotfiles/fzf/fzfrc.fzfrc

# =============================================================================
#                           Custom Functions
# =============================================================================
# BitBake Functions
function bitbake_clean_build() {
    bitbake -c cleansstate "$@"
    bitbake -c cleanall "$@"
    bitbake "$@"
}

function bitbake_clean() {
    bitbake -c cleansstate "$@"
    bitbake -c cleanall "$@"
}

function bitbake_clean_lock() {
    rm -rf bitbake.lock bitbake.sock hashserve.sock
}

# File Operations
function cat() {
    if [[ $1 == *.md ]]; then
        glow "$@"
    else
        command cat "$@"
    fi
}

function copyfile() {
    if [ -f "$1" ]; then
        xclip -selection clipboard < "$1"
        echo "File contents copied to clipboard."
    else
        echo "File not found: $1"
    fi
}

# =============================================================================
#                           Zoxide Configuration
# =============================================================================
# Initialize zoxide
eval "$(zoxide init zsh)"

# Utility functions
function __zoxide_pwd() {
    \builtin pwd -L
}

function __zoxide_cd() {
    \builtin cd -- "$@"
}

# Hook configuration
function __zoxide_hook() {
    \command zoxide add -- "$(__zoxide_pwd)"
}

# Initialize hook
if [[ ${precmd_functions[(Ie)__zoxide_hook]:-} -eq 0 ]] && [[ ${chpwd_functions[(Ie)__zoxide_hook]:-} -eq 0 ]]; then
    chpwd_functions+=(__zoxide_hook)
fi

# Navigation commands
function __zoxide_z() {
    if [[ "$#" -eq 0 ]]; then
        __zoxide_cd ~
    elif [[ "$#" -eq 1 ]] && { [[ -d "$1" ]] || [[ "$1" = '-' ]] || [[ "$1" =~ ^[-+][0-9]$ ]]; }; then
        __zoxide_cd "$1"
    else
        \builtin local result
        result="$(\command zoxide query --exclude "$(__zoxide_pwd)" -- "$@")" && __zoxide_cd "${result}"
    fi
}

function __zoxide_zi() {
    \builtin local result
    result="$(\command zoxide query --interactive -- "$@")" && __zoxide_cd "${result}" && tmux
}

function z() {
    __zoxide_z "$@"
}

function zi() {
    __zoxide_zi "$@"
}

# Zoxide completions
if [[ -o zle ]]; then
    __zoxide_result=''

    function __zoxide_z_complete() {
        [[ "${#words[@]}" -eq "${CURRENT}" ]] || return 0

        if [[ "${#words[@]}" -eq 2 ]]; then
            _files -/
        elif [[ "${words[-1]}" == '' ]]; then
            __zoxide_result="$(\command zoxide query --exclude "$(__zoxide_pwd || \builtin true)" --interactive -- ${words[2,-1]})" || __zoxide_result=''
            \builtin bindkey '\e[0n' '__zoxide_z_complete_helper'
            \builtin printf '\e[5n'
        fi
        return 0
    }

    function __zoxide_z_complete_helper() {
        if [[ -n "${__zoxide_result}" ]]; then
            BUFFER="z ${(q-)__zoxide_result}"
            \builtin zle reset-prompt
            \builtin zle accept-line
        else
            \builtin zle reset-prompt
        fi
    }
    \builtin zle -N __zoxide_z_complete_helper

    [[ "${+functions[compdef]}" -ne 0 ]] && \compdef __zoxide_z_complete z
fi

# Plugin Configuration
plugins=(git fzf-zsh-plugin fzf-tab zsh-autosuggestions)

